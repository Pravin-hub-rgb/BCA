# # .github/workflows/update-github-data.yml
# name: Update Git Data

# on:
#   schedule:
#     - cron: '0 * * * *'  # Runs every hour
#   workflow_dispatch:  # Allow manual triggering
#   push:
#     branches: [ master ]  # Also run on pushes to capture new commits quickly

# jobs:
#   update-data:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4
#       with:
#         token: ${{ secrets.GITHUB_TOKEN }}
#         fetch-depth: 0  # Fetch full history for accurate commit count

#     - name: Create data directory
#       run: |
#         mkdir -p public/git-data
#         echo "📁 Created data directory"

#     - name: Get repository data
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       run: |
#         set -e  # Exit on any error
        
#         echo "🔍 Fetching repository data..."
        
#         # Get total commit count using git (more accurate)
#         echo "📊 Getting total commit count..."
#         TOTAL_COMMITS=$(git rev-list --all --count)
#         echo "$TOTAL_COMMITS" > public/git-data/total-commits.txt
#         echo "✅ Total commits: $TOTAL_COMMITS"
        
#         # Get recent commits (fetch 25 to account for automated commits)
#         echo "📝 Fetching recent commits (25 commits)..."
#         for i in {1..3}; do
#           if curl -s -f \
#             -H "Authorization: token $GITHUB_TOKEN" \
#             -H "Accept: application/vnd.github.v3+json" \
#             "https://api.github.com/repos/${{ github.repository }}/commits?per_page=25" \
#             > public/git-data/recent-commits.json; then
#             echo "✅ Recent commits fetched successfully"
#             break
#           else
#             echo "❌ Attempt $i failed, retrying..."
#             sleep 5
#           fi
#         done
        
#         # Verify the commits were fetched and validate JSON
#         if ! jq empty public/git-data/recent-commits.json 2>/dev/null; then
#           echo "❌ Invalid JSON in recent-commits.json"
#           exit 1
#         fi
        
#         COMMIT_COUNT=$(jq length public/git-data/recent-commits.json)
#         echo "✅ Fetched $COMMIT_COUNT commits"
        
#         # Get last updated timestamp from DEVELOPMENT commits only (not automated ones)
#         echo "🕐 Getting last development commit timestamp..."
        
#         # Find the most recent non-automated commit
#         LAST_DEV_COMMIT_DATE=$(git log --format="%aI" --grep="🤖" --grep="\[skip ci\]" --grep="Update commit data" --grep="GitHub Actions" --grep="Automated commit" --grep="Auto-update" --grep="CI:" --grep="chore: update data" --grep="docs: update stats" --grep="Update git data" --invert-grep -1 | head -1)
        
#         if [ -n "$LAST_DEV_COMMIT_DATE" ]; then
#           echo "$LAST_DEV_COMMIT_DATE" > public/git-data/last-updated.txt
#           echo "✅ Last development commit date: $LAST_DEV_COMMIT_DATE"
#         else
#           # Fallback to most recent commit if no development commits found
#           LAST_COMMIT_DATE=$(git log -1 --format="%aI")
#           echo "$LAST_COMMIT_DATE" > public/git-data/last-updated.txt
#           echo "⚠️ No development commits found, using last commit date: $LAST_COMMIT_DATE"
#         fi
        
#         # Add a generation timestamp for debugging
#         date -u +"%Y-%m-%dT%H:%M:%SZ" > public/git-data/generated-at.txt
#         echo "✅ Generated at: $(cat public/git-data/generated-at.txt)"

#     - name: Validate and debug generated files
#       run: |
#         echo "🔍 Validating generated files..."
        
#         # Check if all files exist and are not empty
#         for file in recent-commits.json total-commits.txt last-updated.txt; do
#           if [[ ! -s "public/git-data/$file" ]]; then
#             echo "❌ File $file is missing or empty"
#             exit 1
#           else
#             echo "✅ File $file exists and has content"
#           fi
#         done
        
#         echo ""
#         echo "=== DEBUGGING INFO ==="
#         echo "📁 Files in git-data directory:"
#         ls -la public/git-data/
        
#         echo ""
#         echo "📊 Total commits: $(cat public/git-data/total-commits.txt)"
#         echo "🕐 Last updated (development): $(cat public/git-data/last-updated.txt)"
#         echo "⚡ Generated at: $(cat public/git-data/generated-at.txt)"
        
#         echo ""
#         echo "📝 Recent commits summary (first 10):"
#         jq -r '.[] | "\(.commit.message | split("\n")[0]) - \(.author.login // "unknown")"' \
#           public/git-data/recent-commits.json | head -10
        
#         echo ""
#         echo "🔍 Development vs Automated commit analysis:"
#         DEV_COMMITS=$(jq -r '.[] | select(.commit.message | test("🤖|\\[skip ci\\]|Update commit data|GitHub Actions|Automated commit|Auto-update|CI:|chore: update data|docs: update stats|Update git data"; "i") | not) | .commit.message | split("\n")[0]' public/git-data/recent-commits.json | wc -l)
#         AUTO_COMMITS=$(jq -r '.[] | select(.commit.message | test("🤖|\\[skip ci\\]|Update commit data|GitHub Actions|Automated commit|Auto-update|CI:|chore: update data|docs: update stats|Update git data"; "i")) | .commit.message | split("\n")[0]' public/git-data/recent-commits.json | wc -l)
#         echo "   Development commits found: $DEV_COMMITS"
#         echo "   Automated commits found: $AUTO_COMMITS"
        
#         if [ "$DEV_COMMITS" -gt 0 ]; then
#           echo ""
#           echo "🎯 Development commits:"
#           jq -r '.[] | select(.commit.message | test("🤖|\\[skip ci\\]|Update commit data|GitHub Actions|Automated commit|Auto-update|CI:|chore: update data|docs: update stats|Update git data"; "i") | not) | "   - \(.commit.message | split("\n")[0])"' \
#             public/git-data/recent-commits.json | head -5
            
#           echo ""
#           echo "🎯 Most recent development commit date:"
#           git log --format="   %aI - %s" --grep="🤖" --grep="\[skip ci\]" --grep="Update commit data" --grep="GitHub Actions" --grep="Automated commit" --grep="Auto-update" --grep="CI:" --grep="chore: update data" --grep="docs: update stats" --grep="Update git data" --invert-grep -1 | head -1
#         fi

#     - name: Commit and push changes
#       run: |
#         git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
#         git config --local user.name "GitHub Actions Bot"
        
#         # Check if there are changes to commit
#         if git diff --quiet public/git-data/; then
#           echo "📝 No changes detected in git data files"
#           exit 0
#         fi
        
#         echo "📝 Changes detected, committing..."
#         git add public/git-data/
#         git commit -m "🤖 Update commit data - $(date -u +'%Y-%m-%d %H:%M UTC') [skip ci]"
        
#         # Push with retry logic
#         for i in {1..3}; do
#           if git push; then
#             echo "✅ Changes pushed successfully"
#             break
#           else
#             echo "❌ Push attempt $i failed, retrying..."
#             sleep 5
#           fi
#         done

#     - name: Final summary
#       run: |
#         echo ""
#         echo "🎉 === WORKFLOW COMPLETED SUCCESSFULLY ==="
#         echo "📊 Total commits: $(cat public/git-data/total-commits.txt)"
#         echo "🕐 Last updated (development): $(cat public/git-data/last-updated.txt)"
#         echo "📝 Recent commits fetched: $(jq length public/git-data/recent-commits.json)"
#         echo "⚡ Data generated at: $(cat public/git-data/generated-at.txt)"
#         echo ""
#         echo "🔗 Your website should now show the updated commit information!"


# .github/workflows/update-github-data.yml
name: Update Git Data

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours (reduces commits)
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ master ]  # Run on pushes to capture new commits

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create data directory
      run: |
        mkdir -p public/git-data
        echo "📁 Created data directory"

    - name: Get repository data
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        
        echo "🔍 Fetching repository data..."
        
        # Get total commit count EXCLUDING automated commits
        echo "📊 Getting development commit count..."
        TOTAL_COMMITS=$(git rev-list --all --count --grep="🤖.*Update commit data" --grep="\[skip ci\]" --invert-grep)
        echo "$TOTAL_COMMITS" > public/git-data/total-commits.txt
        echo "✅ Total development commits: $TOTAL_COMMITS"
        
        # Get recent commits (excluding automated ones)
        echo "📝 Fetching recent development commits..."
        git log --format='{"sha":"%H","message":"%s","author_name":"%an","author_email":"%ae","date":"%aI"}' \
          --grep="🤖.*Update commit data" --grep="\[skip ci\]" --invert-grep -25 | \
          jq -s '.' > public/git-data/recent-commits.json
        
        # If no development commits, fallback to recent commits
        if [ $(jq length public/git-data/recent-commits.json) -eq 0 ]; then
          echo "⚠️ No recent development commits found, using latest commits..."
          git log --format='{"sha":"%H","message":"%s","author_name":"%an","author_email":"%ae","date":"%aI"}' -5 | \
            jq -s '.' > public/git-data/recent-commits.json
        fi
        
        # Get last updated timestamp from DEVELOPMENT commits only
        echo "🕐 Getting last development commit timestamp..."
        LAST_DEV_COMMIT_DATE=$(git log --format="%aI" --grep="🤖.*Update commit data" --grep="\[skip ci\]" --invert-grep -1 | head -1)
        
        if [ -n "$LAST_DEV_COMMIT_DATE" ]; then
          echo "$LAST_DEV_COMMIT_DATE" > public/git-data/last-updated.txt
          echo "✅ Last development commit: $LAST_DEV_COMMIT_DATE"
        else
          # Fallback to most recent commit
          LAST_COMMIT_DATE=$(git log -1 --format="%aI")
          echo "$LAST_COMMIT_DATE" > public/git-data/last-updated.txt
          echo "⚠️ Using most recent commit: $LAST_COMMIT_DATE"
        fi
        
        # Add current timestamp for "data last updated"
        date -u +"%Y-%m-%dT%H:%M:%SZ" > public/git-data/data-updated-at.txt
        echo "✅ Data updated at: $(cat public/git-data/data-updated-at.txt)"

    - name: Check if data actually changed
      id: check_changes
      run: |
        # Only commit if there are meaningful changes (not just timestamp)
        if git diff --quiet public/git-data/total-commits.txt public/git-data/recent-commits.json public/git-data/last-updated.txt; then
          echo "📝 No meaningful changes in git data (only timestamp changed)"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "📝 Meaningful changes detected in git data"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes (only if meaningful changes)
      if: steps.check_changes.outputs.changed == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"
        
        git add public/git-data/
        git commit -m "🤖 Update commit data [skip ci]"
        git push

    - name: Summary
      run: |
        echo "🎉 === WORKFLOW COMPLETED ==="
        echo "📊 Development commits: $(cat public/git-data/total-commits.txt)"
        echo "🕐 Last dev commit: $(cat public/git-data/last-updated.txt)"
        echo "⚡ Data refreshed: $(cat public/git-data/data-updated-at.txt)"
        if [ "${{ steps.check_changes.outputs.changed }}" == "true" ]; then
          echo "✅ Changes committed to repository"
        else
          echo "ℹ️ No commit needed (no changes)"
        fi